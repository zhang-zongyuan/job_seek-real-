@page "/descriptions/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title"> Car Descriptions</h3>
<a href="/descriptions/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Description
</a>
<br />
<br />

@if (Descriptions == null)
{
    <div class="alert alert-info">Loading Jobs...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th> Name </th>
                <th> Actions </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var description in Descriptions)
            {
                <tr>
                    <td> @description.Name </td>
                    <td>
                        <a href="/descriptions/view/@description.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/descriptions/edit/@description.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(description.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Description> Descriptions;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Descriptions = await _client.GetFromJsonAsync<List<Description>>($"{Endpoints.DescriptionsEndpoint}");
    }

    async Task Delete(int descriptionId)
    {
        var description = Descriptions.First(q => q.Id == descriptionId);
        var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {description.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.DescriptionsEndpoint}/{descriptionId}");
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

}
