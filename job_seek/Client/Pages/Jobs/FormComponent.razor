@inject HttpClient _client

<EditForm Company="@job" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Make: </label>
            <div>
                <InputSelect @bind-Value="job.MakeId" class="form-control">
                    <option value="">-- Select Make --</option>
                    @if (Makes != null)
                    {
                        foreach (var make in Makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => job.MakeId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Company: </label>
            <div>
                <InputSelect @bind-Value="job.CompanyId" class="form-control">
                    <option value="">-- Select Company --</option>
                    @if (Companys != null)
                    {
                        foreach (var model in Companys)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => job.CompanyId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputSelect @bind-Value="job.DescriptionId" class="form-control">
                    <option value="">-- Select Description --</option>
                    @if (Descriptions != null)
                    {
                        foreach (var description in Descriptions)
                        {
                            <option value="@description.Id">@description.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => job.DescriptionId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Year: </label>
            <div>
                <InputNumber @bind-Value="@job.Year" class="form-control" />
                <ValidationMessage For="@(() => job.Year)" />
            </div>
        </div>

        <div class="form-group">
            <label>License Plate Number: </label>
            <div>
                <InputText @bind-Value="@job.Location" class="form-control" />
                <ValidationMessage For="@(() => job.Location)" />
            </div>
        </div>

        <div class="form-group">
            <label>Daily Rate: </label>
            <div>
                <InputNumber @bind-Value="@job.Pay" class="form-control" />
                <ValidationMessage For="@(() => job.Pay)" />
            </div>
        </div>
    </fieldset>

        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }

            <BackToList Target="jobs" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Job job { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Make> Makes;
    private IList<Company> Companys;
    private IList<Description> Descriptions;

    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        Companys = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompanysEndpoint}");
        Descriptions = await _client.GetFromJsonAsync<List<Description>>($"{Endpoints.DescriptionsEndpoint}");
    }
}

