@page "/vehicles/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title"> Car Vehicles</h3>
<a href="/vehicles/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Vehicle
</a>
<br />
<br />

@if (Vehicles == null)
{
    <div class="alert alert-info">Loading Vehicles...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th> Make </th>
                <th> Model </th>
                <th> Year </th>
                <th> License Plate Number </th>
                <th> Actions </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in Vehicles)
            {
                <tr>
                    <td> @vehicle.Make.Name </td>
                    <td> @vehicle.Model.Name </td>
                    <td> @vehicle.Year </td>
                    <td> @vehicle.LicensePlateNumber </td>
                    <td>
                        <a href="/vehicles/view/@vehicle.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/vehicles/edit/@vehicle.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(vehicle.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Vehicle> Vehicles;

    protected async override Task OnInitializedAsync()
    {
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
    }

    async Task Delete(int vehicleId)
    {
        var vehicle = Vehicles.First(q => q.Id == vehicleId);
        var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {vehicle.LicensePlateNumber}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.VehiclesEndpoint}/{vehicleId}");
            await OnInitializedAsync();
        }
    }

}
