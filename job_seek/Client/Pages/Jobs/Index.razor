@page "/jobs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title"> Jobs</h3>
<a href="/jobs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Job
    </a>
<br />
<br />

@if (Jobs == null)
{
    <div class="alert alert-info">Loading Jobs...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th> Make </th>
                <th> Company </th>
                <th> Year </th>
                <th> Locaiton </th>
                <th> Actions </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in Jobs)
            {
                <tr>
                    <td> @job.Make.Name </td>
                    <td> @job.Company.Name </td>
                    <td> @job.Year </td>
                    <td> @job.Location </td>
                    <td>
                        <a href="/jobs/view/@job.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/jobs/edit/@job.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(job.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Job> Jobs;

    protected async override Task OnInitializedAsync()
    {
        Jobs = await _client.GetFromJsonAsync<List<Job>>($"{Endpoints.JobsEndpoint}");
    }

    async Task Delete(int jobId)
    {
        var job = Jobs.First(q => q.Id == jobId);
        var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {job.Location}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.JobsEndpoint}/{jobId}");
            await OnInitializedAsync();
        }
    }

}
