@page "/staffs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title"> Job Staffs</h3>
<br />
<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staffs
</a>
<br />
<br />
@if (Staffs == null)

{
<div class="alert alert-info">Loading Staffs...</div>
}
else
{
<table class="table table-responsive">
    <thead>
        <tr>
            <th>Name</th>
            <th>Role</th>
            <th>StaffAddress</th>
            <th>Email</th>
            <th>PhoneNO</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var staff in Staffs)
        {
        <tr>
            <td>@staff.Name</td>
            <td>
                <a href="/staffs/view/@staff.Id" class="btn btn-primary">
                    <span class="oi oi-book"></span>
                </a>
                <a href="/staffs/edit/@staff.Id" class="btn btn-warning">
                    <span class="oi oi-pencil"></span>
                </a>
                <button class="btn btn-danger" @onclick="@(()=>Delete(staff.Id))">
                    <span class="oi oi-delete"></span>
                </button>
            </td>
        </tr>
        }
    </tbody>
</table>
}
<br />
@code {
    private List<Staff> Staffs;
    protected async override Task OnInitializedAsync()
    {
    Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }
    async Task Delete(int staffId)
    {
        var staff = Staffs.First(q => q.Id == staffId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{staff.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
            await OnInitializedAsync();
        }
    }
}

